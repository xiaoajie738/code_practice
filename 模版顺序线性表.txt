#ifndef SEQLIST_H
#define SEQLIST_H
#include<iostream>
using namespace std;


template <class T>
class seqList
{
public:
	seqList(int size);
	~seqList();
	bool isEmpty();
	bool isFull();
	void clearSeqList();
	int insertElement(int i, T e);
	int deleteElement(int i, T &e);
	void traverseSeqList();
private:
	T *m_pList;
	int m_iSize;
	int m_iLength;

};
//构造函数
template <class T>
seqList<T>::seqList(int size)
{
   m_iSize = size;
   m_pList = new T[m_iSize];
   m_iLength = 0;
}
//析构函数
template <class T>
seqList<T>::~seqList()
{
   delete []m_pList;
   m_pList = NULL;
}
//判空
template <class T>
bool seqList<T>::isEmpty()
{
	return m_iLength == 0 ? true:false;
}
//判满
template <class T>
bool seqList<T>::isFull()
{
	return m_iLength == m_iSize ? true:false;
}
//清空线性表
template <class T>
void seqList<T>::clearSeqList()
{
   m_iLength = 0;
}
//插入元素
template <class T>
int seqList<T>::insertElement(int i, T e)
{
	if(isFull())
		return -1;
	if(i < 0 || i > m_iLength)
		return -1;
	for(int k = m_iLength - 1; k >= i; k--)
	{
	   m_pList[k+1] = m_pList[k];
	}
	m_pList[i] = e;
	m_iLength++;
	return 0;
}
//删除
template <class T>
int seqList<T>::deleteElement(int i, T &e)
{
	if(i < 0 || i >= m_iLength)
		return -1;    //删除失败返回-1
	if(isEmpty())
		return -1;
	e = m_pList[i];
	for(int k = i; k < m_iLength - 1; k++)
	{
		m_pList[k] = m_pList[k+1];
	}
	m_iLength--;
	return 0;
}
//遍历
template <class T>
void seqList<T>::traverseSeqList()
{
   for(int i = 0; i < m_iLength; i++)
   {
      cout << m_pList[i] << endl;
   }
}


#endif