//小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的//正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找//出所有和为S的连续正数序列? Good Luck! 

//非递归方法
vector<int> fun(int begin,int end)
{
   vector<int> vec;
   while(begin <= end)
   {
      vec.push_back(begin);
	  begin++;
   }
   return vec;
 }

vector<vector<int>> FindContinuousSequence(int sum) 
{
       int begin = 1, end = 2;
	vector<vector<int>> result;
	vector<int> vec;
	int mid = (1+sum)/2;
	int num = begin + end;
	while(begin < mid && end < sum)
	{
	  
	  // num = (begin + end)*(end - begin + 1)/2;
	   if(num < sum)
	   {
		    end++;
			num += end;
	   }
		  
	   else if(num > sum)
	   {
		    num -= begin;
		    begin++;
			
	   }     
	   else
	   {
		    vec = fun(begin,end);
			result.push_back(vec);
			num -= begin;
			begin++;
	   }
	}
	return result;
}

//递归方法
void numOfContinuousSubarray(vector<vector<int> > &res, vector<int> &vec,int num,int index,int sum)
{
	if(index >= sum)
		return;
	 num += index;
	 vec.push_back(index);
	 if(num < sum)
        numOfContinuousSubarray(res,vec,num,index+1,sum);
	 else if (num > sum)
	 {
		 sum = 0;
		 vec.clear();
	 }
	 else
	 {
		 res.push_back(vec);
		 vec.clear();
	 }
}

vector<vector<int> > FindContinuousSequence(int sum) 
{
	vector<vector<int> > res;
	vector<int> vec;
	int num = 0,index = 1;
	for(int i = 1; i <= sum; ++i)
	{
	    numOfContinuousSubarray(res,vec,num, i,sum);
	}
	
	return res;
}



