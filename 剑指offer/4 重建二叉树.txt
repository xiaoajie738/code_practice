#include<iostream>
#include<vector>
using namespace std;

//输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
//假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
//例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，
//则重建二叉树并返回。

// Definition for binary tree
 struct TreeNode 
 {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };

TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) 
{
	int node;
	vector<int> leftPre,rightPre,leftVin,rightVin;
	if(pre.size() == 0 && vin.size() == 0)
		return NULL;
	node = pre[0];
	TreeNode* treeNode = new TreeNode(node);
	bool flag = true;
	//根据在前序遍历中得到的根结点，将中序遍历中的结点划分为左右子树
	for(int i = 0; i < vin.size(); i++)
	{
		if(node == vin[i])
		{
			flag = false;
			continue;
		}
	   if(flag && node != vin[i])
		   leftVin.push_back(vin[i]);
	   else
	   {
	      rightVin.push_back(vin[i]);
	   }
	}
	//将前序遍历中的结点划分为左子树和右子树
	 int leftSize = leftVin.size();
    for(int i = 1; i < pre.size(); i++)
	{
	   if(leftSize != 0)
	   {
	      leftPre.push_back(pre[i]);
		  leftSize--;
	   }
	   else  
		   rightPre.push_back(pre[i]);
	}
	treeNode->left = reConstructBinaryTree(leftPre,leftVin);
	treeNode->right = reConstructBinaryTree(rightPre,rightVin);
	return treeNode;
}
int main()//主函数
{  
	int array[8] = {1,2,4,7,3,5,6,8};
	int array1[8] = {4,7,2,1,5,3,8,6};
	vector<int> pre(array,array+8);
	vector<int> vin(array1,array1+8);
	reConstructBinaryTree(pre,vin);
	system("pause");
	return 0;
}