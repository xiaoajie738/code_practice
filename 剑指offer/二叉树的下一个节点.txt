//给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。
//注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。


TreeLinkNode* GetNext(TreeLinkNode* pNode)
{
	if(pNode == NULL )
		return NULL;
	TreeLinkNode* pNext = NULL;
	//情况1，当是根节点时
	if(pNode->next == NULL)
	{
		if(pNode->right != NULL)
		{
			pNext = pNode->right;
			while(pNext->left != NULL)
				pNext = pNext->left;
		}
		else
			pNext = NULL;
	}
	//情况2，当该节点有右子树时
	else if(pNode->right != NULL)
	{
	  pNext = pNode->right;
	  while(pNext->left != NULL)
	     pNext = pNext->left;
	}
	//情况3，当该节点无右子树，且是其父亲结点的左结点
	else if(pNode->right == NULL && pNode == pNode->next->left)
	   pNext = pNode->next;
	//情况4，当该节点无右子树，且是父亲的右结点
	else
	{
		pNext = pNode;
		while(pNext->next != NULL && pNext != pNext->next->left)
		{
		    pNext = pNext->next;
		}
		pNext = pNext->next;
	}
	return pNext;
}
