
//给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6//个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,//[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。

vector<int> maxInWindows(const vector<int>& num, unsigned int size)
{
	vector<int> res;
	if(num.size() < size || size == 0)
		return res;
	for(int i = 0; i < num.size()-size+1;++i)
	{
		int tmp = num[i];
		for(int j = i+1; j < i+size; ++j)
		{
		   if(tmp < num[j])
			   tmp = num[j];
		}
		res.push_back(tmp);
	}
	return res;
}
//用队列
vector<int> maxInWindows(const vector<int>& num, unsigned int size)  
{  
	deque<int> deq;  
	vector<int> vect;  
	if (num.size() == 0)  
		return vect;  
	if(size>=1 && num.size() >= size)  
	{  
		for(int i=0; i<size; i++)  
		{  
			while(!deq.empty() && num[i] >= num[deq.back()])  
				deq.pop_back();  
			deq.push_back(i);  
		}  
		for(int i=size; i<num.size(); i++)  
		{  
			vect.push_back(num[deq.front()]);  
			while(!deq.empty() && num[i] >= num[deq.back()])  
				deq.pop_back();  
			while(!deq.empty() && i-size >= deq.front())  
				deq.pop_front();  
			deq.push_back(i);  
		}  
		vect.push_back(num[deq.front()]);  
	}  
	return vect;  
}  