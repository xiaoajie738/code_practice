#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
 
struct ListNode 
{
	int val;
	struct ListNode *next;
	ListNode(int x) :
	val(x), next(NULL) {}
};

void insertNode(ListNode* pHead,int node)
{
	if(pHead == NULL)
		return;
	ListNode* pC = pHead;
	ListNode* newNode = new ListNode(node);
	while(pC->next != NULL)
	{
		pC = pC->next;
	}
	pC->next = newNode;
}
void printList(ListNode* pHead)
{
	//pHead->val = 8;
	while(pHead != NULL)
	{
		cout << pHead->val << endl;
		pHead = pHead->next; 
	}
}
//不改变原来链表的结构
ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
{
	if(pHead1 == NULL && pHead2 == NULL)
		return NULL;
	if(pHead1 == NULL)
		return pHead2;
	if(pHead2 == NULL)
		return pHead1;
	ListNode* newList;
	if(pHead1->val < pHead2->val)
	{
		newList = new ListNode(pHead1->val);
		pHead1 = pHead1->next;
	}	
	else
	{
		newList = new ListNode(pHead2->val);
		pHead2 = pHead2->next;
	}
	while(pHead1 != NULL && pHead2 != NULL)
	{
	   if(pHead1->val <= pHead2->val)
	   {
		    ListNode* pEnd = newList;
		    while(pEnd->next != NULL)
				pEnd = pEnd->next;
			ListNode* newNode = new ListNode(pHead1->val);
			pEnd->next = newNode;
			pHead1 = pHead1->next;
	   }
	   else
	   {
		   //newList->next = pHead2;
		   ListNode* pEnd = newList;
		   while(pEnd->next != NULL)
			   pEnd = pEnd->next;
		  	ListNode* newNode = new ListNode(pHead2->val);
			pEnd->next = newNode;
		   pHead2 = pHead2->next;
	   }   
	}
	if(pHead1 == NULL)
	{ 
	   ListNode* pEnd = newList;
	   while(pEnd->next != NULL)
		   pEnd = pEnd->next;
	   pEnd->next = pHead2;
	}
	else
	{
		ListNode* pEnd = newList;
		while(pEnd->next != NULL)
			pEnd = pEnd->next;
		pEnd->next = pHead1;
	}
	return newList;
}
//改变了原来的链表的结构,非递归
ListNode* Merge1(ListNode* pHead1, ListNode* pHead2)
{
	if(pHead1 == NULL)
		return pHead2;
	if(pHead2 == NULL)
		return pHead1;
	ListNode* newList = NULL;
	ListNode* pCurrent;
	while(pHead1 != NULL && pHead2 != NULL)
	{
	   if(pHead1->val < pHead2->val)
	   {  
		   if(newList == NULL)
			   newList = pCurrent = pHead1;
		   else
		   {
			   pCurrent->next = pHead1;
			   pCurrent = pCurrent->next;
		   }
		   pHead1 = pHead1->next;
	   }
	   else
	   {
		   if(newList == NULL)
			   newList = pCurrent = pHead1;
		   else
		   {
			   pCurrent->next = pHead2;
			   pCurrent = pCurrent->next;
		   }
		   pHead2 = pHead2->next;
	   }  
	}
	if(pHead1 == NULL)
	{
	   pCurrent->next = pHead2;
	}
	else
	{
	   pCurrent->next = pHead1;
	}
	return newList;
}

//改变原来链表的结构,递归
ListNode* Merge2(ListNode* pHead1, ListNode* pHead2)
{
	if(pHead1 == NULL)
		return pHead2;
	if(pHead2 == NULL)
		return pHead1;
	ListNode* newList = NULL;
	if(pHead1->val < pHead2->val)
	{
		newList = pHead1;
	    newList->next = Merge2(pHead1->next,pHead2);
	}
	else
	{
	    newList = pHead2;
		newList->next = Merge2(pHead1,pHead2->next);
	}
    return newList;
}

int main()
{
	ListNode* pHead1 = new ListNode(1);
	insertNode(pHead1,3);
	insertNode(pHead1,5);
	insertNode(pHead1,7);
	insertNode(pHead1,9);
	ListNode* pHead2 = new ListNode(2);
	insertNode(pHead2,4);
	insertNode(pHead2,6);
	insertNode(pHead2,6);
	insertNode(pHead2,8);
	ListNode* newList =  Merge2(pHead1,pHead2);
	printList(newList);
	system("pause");
    return 0;
}