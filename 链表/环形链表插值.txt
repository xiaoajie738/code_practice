struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
void listPrint(ListNode *head)
{
    while(head != NULL)
	{
	   cout << head->val << endl;
	   head = head->next;
	}
}

ListNode * creatCircleList(vector<int> &A, vector<int> &next)
{
	ListNode *pHead = NULL;       
	if (A.size()!=next.size() || next.size()==0)
	{
		return pHead;
	}
	pHead = new ListNode(A[0]);       
	ListNode *pc = pHead;
	for (int i=0; i<next.size()-1; i++)
	{
		pc->next = new ListNode(A[next[i]]);
		pc = pc->next;
	}
	pc->next = pHead;
	return pHead;               
}

ListNode* insertNode(ListNode *pHead, int val){
	if (pHead == NULL)
	{
		return pHead;
	}
	ListNode *pp = pHead;
	ListNode *pc = pHead->next;
	ListNode *pm = NULL;
	while (pc != pHead)
	{
		if (pp->val <= val && val <= pc->val)
		{
			pm = new ListNode(val);
			pm->next = pc;
			pp->next = pm;
			break;
		}
		else 
		{
			pp = pc;
			pc = pc->next;
		}           
	}
	if (pc == pHead)
	{
		pm = new ListNode(val);
		pm->next = pc;
		pp->next = pm;
		pHead = pm->val > pHead->val?pHead:pm;
	}       
	return pHead;       
}
//入口函数 测试样本 [1,3,4,5,7],[1,2,3,4,0],2

ListNode* insert(vector<int> A, vector<int> nxt, int val) 
{
	// write code here
	ListNode *pHead = NULL;
	if (A.size()!=nxt.size() || nxt.size()==0)
	{
		return pHead;
	}
	pHead = creatCircleList(A, nxt);
	pHead = insertNode(pHead, val);

	ListNode *pp = pHead;
	ListNode *pc = pHead->next;
	while (pc != pHead)
	{
		pp = pc;
		pc = pc->next;           
	}
	pp->next = NULL;

	return pHead;  
}


//自己写的版本
struct ListNode 
{
	int val;
	struct ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};

void printList(ListNode* pHead)
{
	while(pHead != NULL)
	{
	   cout << pHead->val << endl;
	   pHead = pHead->next;
	}
}

ListNode* creatCicleList(vector<int>& A, vector<int>& nxt)
{
   ListNode* pHead = NULL;
   if(A.size() != nxt.size() || nxt.size() == 0)
		return NULL;
   pHead = new ListNode(A[0]);
   ListNode* pc = pHead;
   for(int i = 0; i < nxt.size()-1; i++)
   {
	   ListNode* newnode = new ListNode(0);
	   newnode->val = A[nxt[i]];
	   pc->next = newnode;
	   pc = pc->next;
   }
   pc->next = pHead;
   return pHead;
}

ListNode* insertVal(ListNode* pHead,int val)
{
	if(pHead == NULL)
		return pHead;
	 ListNode* pp = pHead;
	 ListNode* pc = pHead->next;
	 ListNode* pNode = new ListNode(val);
	 while(pc != pHead)
	 {
		 if(val >= pp->val && val <= pc->val)
		 {
			 pp->next = pNode;
			 pNode->next = pc;
			 return pHead;
		 }
		 pp = pp->next;
		 pc = pc->next;
	 }
	 if(pc == pHead)
	 {
	    pp->next = pNode;
		pNode->next = pHead;
	 }
	 if(val > pp->val)
		 return pHead;
	 return pNode;

}

ListNode* insert(vector<int> A, vector<int> nxt, int val) 
{
	// write code here
	ListNode* pHead;
	pHead = creatCicleList(A,nxt);
	pHead = insertVal(pHead,val);
	ListNode* pp = pHead;
	ListNode* pc = pHead->next;
	while(1)
	{
		if(pc == pHead)
		{
		   pp->next = NULL; 
		   break;
		}
		pp = pp->next;
		pc = pc->next;
	}
	return pHead;
}
