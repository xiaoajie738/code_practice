//链表的k逆序
ListNode* inverse(ListNode* head, int k) 
{
       if (head==NULL || head->next==NULL || k < 2){
		return head;
	}
	stack<ListNode*> s;
	ListNode *node = NULL, *prevNode = NULL, *curNode = NULL, *nextNode = NULL,
		*newHead = NULL;

	node = head;
	while (node != NULL) 
	{
		s.push(node);
		node = node->next;
		if (s.size() == k) 
		{
			while (!s.empty()) 
			{
				curNode = s.top();
				s.pop();
				if (newHead == NULL) 
				{
					newHead = curNode;
				}
				if (prevNode != NULL) 
				{
					prevNode->next = curNode;
				}
				prevNode = curNode;
			}
		}
	}

	if (!s.empty()) 
	{
		while (!s.empty()) 
		{
			curNode = s.top();
			s.pop();
			if (nextNode == NULL) 
			{
				curNode->next = NULL;
			}
			else 
			{
				curNode->next = nextNode;
			}
			nextNode = curNode;
		}
		prevNode->next = curNode;
	} 

	else 
	{
		prevNode->next = NULL;
	}
	return newHead;
}

//强势的递归版本，牛逼，可惜不是本宝宝写的
ListNode* inverse(ListNode* head, int k) 
{
	// write code here
	if (head == NULL || head->next == NULL || k < 2)
	{
		return head;
	}
	ListNode *p = head;
	for (int i=0; i < k-1; i++)
	{
		if (p->next != NULL)
		{
			p = p->next;
		}
		else
		{
			return head;                  
		}           
	}
	ListNode *newHead = inverse(p->next, k);
	ListNode *pre = head;
	ListNode *pc = pre->next;
	ListNode *ptemp = NULL;

	pre->next = newHead;
	while (pre != p)
	{
		ptemp = pc->next;
		pc->next = pre;
		pre = pc;
		pc = ptemp;
	}
	return p;
}

//第二种版本的栈调用，也很666
ListNode* inverse(ListNode* head, int k) 
{
	// write code here
	ListNode* p1 = head;
	ListNode* p2 = head;
	stack<int> s;
	int count=0;
	if(head==NULL||head->next==NULL||k<2)
	{
		return head;
	}
	while(p1)
	{
		s.push(p1->val);
		p1=p1->next;
		count++;
		if(count==k)
		{
			while(p2!=p1)
			{
				p2->val=s.top();
				s.pop();
				p2=p2->next;
			}
			count=0;
		}
	}
	return head;
}





















