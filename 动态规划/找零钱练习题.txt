#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

//暴力搜索
//int process(vector<int> vec,int index, int aim)
//{
//   int res = 0;
//   if(index == vec.size())
//   {
//       if(aim == 0)
//		   return 1;
//	   else 
//		   return 0;
//   }
//   else
//   {
//      for(int i = 0; vec[index]*i <= aim; i++)
//	  {
//		  res += process(vec,index+1,aim - vec[index]*i);
//	  }
//   }
//   return res;
//}
//
//int coin(vector<int> vec,int aim)
//{
//   if(vec.size() == 0 || aim < 0)
//   {
//       return 0;
//   }
//   return process(vec,0,aim);
//}

//记忆搜索
//int process(vector<int> vec, int index,int **map,int aim)
//{
//	int res = 0;
//   if(index == vec.size())
//   {
//      if(aim == 0)
//		  return 1;
//	  else
//		  return 0;
//   }
//   else
//   {
//	   int mapValue = 0;
//	   for(int i = 0; vec[index]*i <= aim; i++)
//	   {
//		   int mapValue;
//		   mapValue = map[index + 1][aim - vec[index]*i];
//		   if(mapValue != -1)
//		   {
//			   res += mapValue;
//		   }
//		   else
//		   {
//			   res += process(vec,index + 1,map,aim - vec[index]*i);
//		   }
//	   }
//   }
//	   map[index][aim] = res;
//  return res;
//}
//int coin(vector<int> vec, int aim)
//{
//   if(vec.size() == 0 || aim < 0)
//	   return 0;
//   int **map;
//   map = new int *[vec.size() + 1];
//   for(int i = 0; i < vec.size() + 1; i++)
//   {
//      map[i] = new int[aim + 1];
//   }
//   //哈希表初始化
//   for(int i = 0; i < vec.size() + 1; i++)
//   {
//       for(int j = 0; j < aim + 1; j++)
//	   {
//		   map[i][j] = -1;
//	   }
//   }
//   return process(vec,0,map,aim);
//}
//动态规划
int countWays(vector<int> penny, int n, int aim) 
{
	// write code here
	int **mat;
	mat = new int*[n];
	for(int i = 0; i < n; i++)
	{
	   mat[i] = new int[aim + 1];
	}
	//矩阵初始化
	for(int i = 0; i < n; i++)
	{
	   for(int j = 0; j < aim+1; j++)
	   {
		 if(j == 0)
			 mat[i][j] = 1;
		 else if(i == 0 && j%penny[0] == 0)
			 mat[i][j] = 1;
		 else
			 mat[i][j] = 0;
	   }
	}
	//遍历
	for(int i = 1; i < n; i++)
	{
		for(int j = 1; j < aim+1; j++)
		{
			int  n = 1;
			for(int k = j; k >= 0; )
			{
                          if(k >= 0)
			   {
			      mat[i][j] += mat[i-1][k];
			   }
			   k = k - n*penny[i];
			}
		}
	}

	return mat[n-1][aim];

}


int countWays1(vector<int> penny, int n, int aim) 
{
		int f[1000];
		memset(f,0,sizeof(f)); f[0] = 1;
		for(int i = 0;i < n;++ i)
			for(int j = penny[i];j <= aim;++ j)
				f[j] += f[j - penny[i]];
		return f[aim];

}
//2017 5 25
int countWays(vector<int> penny, int n, int aim) 
{
	// write code here
	if(penny.size() == 0 || aim < 0)
		return 0;
	vector<vector<int>> mat(n);
	for(int i = 0; i < n; ++i)
	{
	   mat[i].resize(aim+1);
	}
	//初始化
	for(int i = 0; i < n; ++i )
	{
	   for(int j = 0; j < aim+1; ++j)
	   {
		   if(j == 0)
			   mat[i][j] = 1;
           if(i == 0 && (j % penny[0]) == 0)
			   mat[i][j] = 1;
	      
	   }
	}
	//动态规划
	for(int i = 1; i < n; ++i)
	{
	    for(int j = 1; j < aim+1; ++j)
		{
		   for(int m = 0, k = j-m*penny[i]; k >= 0;++m,k = j-m*penny[i])
		   {
		      mat[i][j] += mat[i-1][k]; 
		   }
		}
	}
	return mat[n-1][aim];
}
int main()
{
	vector<int> vec;
	vec.push_back(5);
	vec.push_back(10);
	vec.push_back(25);
	vec.push_back(1);
	cout << countWays1(vec,4,1000) << endl;
	system("pause");
	return 0;
}