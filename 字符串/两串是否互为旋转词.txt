
//调用标准字符串匹配函数find（）

bool chkRotation(string A, int lena, string B, int lenb) 
{
	// write code here
	if(lena != lenb)
		return false;
	 A += A;
	if(A.find(B) != string::npos))
		return true;
	return false;
}

//用KMP算法
void getNextArr(string& ms,vector<int> &next)
{
	int len=ms.size();
	int cn=0;
	int pos=2;
	next[0]=-1;
	next[1]=0;
	while(pos<len)
	{
		if(ms[pos-1]==ms[cn])
		{
			next[pos++]=++cn;
		}
		else if(cn > 0)
		{
			cn=next[cn];//????
		}
		else
		{
			next[pos++]=0;
		}
	}
}

int kmp(string& str,string &ms,vector<int> &next)
{
	getNextArr(ms,next);
	int len1=str.size();
	int len2=ms.size();
	int i=0,j=0;
	while(i<len1 && j<len2)
	{
		if(j==-1)
		{
			i++;
			j++;
		}
		if(str[i]!=ms[j])
		{
			j=next[j];
		}
		else
		{
			j++;
			i++;
		}
	}
	if(j!=len2)
	{
		return -1;
	}
	else
	{
		return i-j;
	}
}
