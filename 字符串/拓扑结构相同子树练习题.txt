对于两棵彼此独立的二叉树A和B，请编写一个高效算法，检查A中是否存在一棵子树与B树的拓扑结构完全相同。
给定两棵二叉树的头结点A和B，请返回一个bool值，代表A中是否存在一棵同构于B的子树。
//code
struct TreeNode 
{
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :val(x), left(NULL), right(NULL) 
	{
	}
};
void TreeToString(TreeNode* node,string &s)
{
   if(node == NULL)
   {
	   s += "#";
	   return;
   }
	   
    int num = node->val; 
	/*stringstream m;
	m << num;
	s += m.str() + "!";
	m.clear();*/
	s += to_string((long long)num);
   TreeToString(node->left,s);
   TreeToString(node->right,s);
}

bool chkIdentical(TreeNode* A, TreeNode* B) 
{
	// write code here
       if(A == NULL || B == NULL)
              return false;
	string strA,strB;
	TreeToString(A,strA);
	TreeToString(B,strB);
	size_t found;
	found =  strA.find(strB);//当strB为空时，函数返回0
	if(found != string::npos)
		return true;
	return false;
}
