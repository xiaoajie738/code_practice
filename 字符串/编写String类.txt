#ifndef STRING_H
#define STRING_H
#include<iostream>

class String
{ 
public: 
	String(const char *str = NULL); // 普通构造函数 
	String(const String &other); // 拷贝构造函数 
	~ String(void); // 析构函数 
	String & operator =(const String &other); // 赋值函数 
	 void print();
private: 
	char *m_data; // 用于保存字符串 
};

//	//普通构造函数
//	String::String(const char *str) 
//{
//	if(str==NULL) 
//	{
//		m_data = new char[1]; // 得分点：对空字符串自动申请存放结束标志'\0'的空
//		//加分点：对m_data加NULL 判断
//		*m_data = '\0'; 
//	} 
//	else
//	{
//		int length = strlen(str); 
//		m_data = new char[length+1]; // 若能加 NULL 判断则更好 
//		strcpy(m_data, str); 
//	}
//}
//// String的析构函数
//String::~String(void) 
//{
//	delete [] m_data; // 或delete m_data;
//}
////拷贝构造函数
//String::String(const String &other) 　　　// 得分点：输入参数为const型
//{ 
//	int length = strlen(other.m_data); 
//	m_data = new char[length+1]; 　　　　//加分点：对m_data加NULL 判断
//	strcpy(m_data, other.m_data); 
//}
////赋值函数
//String & String::operator =(const String &other) // 得分点：输入参数为const型
//{ 
//	if(this == &other) 　　//得分点：检查自赋值
//		return *this; 
//	delete [] m_data; 　　　　//得分点：释放原有的内存资源
//	int length = strlen( other.m_data ); 
//	m_data = new char[length+1]; 　//加分点：对m_data加NULL 判断
//	strcpy( m_data, other.m_data ); 
//	return *this; 　　　　　　　　//得分点：返回本对象的引用
//}
String::String(const char *str )
{
	//这个自己没注意到，空串也要在末尾赋值‘\0’
	if(str == NULL)
	{
	  m_data = new char[1];
	  *m_data = '\0';
	}
	else
	{
		m_data = new char[strlen(str)+1];
		if(m_data != NULL)
		   strcpy(m_data,str);
	}
	std::cout << "String()" << std::endl;
}

String::String(const String &other)
{
	m_data = new char[strlen(other.m_data)+1];
	if(m_data != NULL)
	    strcpy(m_data,other.m_data);
	std::cout << "拷贝String()" << std::endl;
}

String & String::operator =(const String &other)
{
   if(this == &other) //这个自己也没注意到
	   return *this;
   delete []m_data;
   m_data = new char[strlen(other.m_data)+1];
   if(m_data != NULL) //申请内存之后得做判断
	   strcpy(m_data,other.m_data);
   std::cout << "赋值String()" << std::endl;
   return *this; 
}

 void String::print()
 {
    std::cout << m_data << std::endl;
 }
String::~ String(void)
{
   delete []m_data;
   m_data = NULL;

}
#endif


