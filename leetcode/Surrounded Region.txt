#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//
//For example,
//	X X X X
//	X O O X
//	X X O X
//	X O X X
//	After running your function, the board should be:
//
//X X X X
//	X X X X
//	X X X X
//	X O X X
void solveDFS(vector<vector<char> > &board, int i, int j) 
{
	if (board[i][j] == 'O') 
	{
		board[i][j] = '$';
		if (i > 0 && board[i - 1][j] == 'O') 
			solveDFS(board, i - 1, j);
		if (j < board[i].size() - 1 && board[i][j + 1] == 'O') 
			solveDFS(board, i, j + 1);
		if (i < board.size() - 1 && board[i + 1][j] == 'O') 
			solveDFS(board, i + 1, j);
		if (j > 1 && board[i][j - 1] == 'O') 
			solveDFS(board, i, j - 1);
	}
}

void solve(vector<vector<char> >& board) 
{
	for (int i = 0; i < board.size(); ++i) 
	{
		for (int j = 0; j < board[i].size(); ++j) 
		{
			if ((i == 0 || i == board.size() - 1 || j == 0 || j == board[i].size() - 1) && board[i][j] == 'O')
				solveDFS(board, i, j);
		}
	}
	for (int i = 0; i < board.size(); ++i) 
	{
		for (int j = 0; j < board[i].size(); ++j) 
		{
			if (board[i][j] == 'O') board[i][j] = 'X';
			if (board[i][j] == '$') board[i][j] = 'O';
		}
	}
}


int main(void)
{
	char array[4] = {'X','X','X','X'};
	char array1[4] = {'X','O','O','X'};
	char array2[4] = {'X','X','O','X'};
	char array3[4] = {'X','O','X','X'};
	vector<char> tmp(array,array+4);
	vector<char> tmp1(array1,array1+4);
	vector<char> tmp2(array2,array2+4);
	vector<char> tmp3(array3,array3+4);
	vector<vector<char> > vec(4);
	vec[0] = tmp;
	vec[1] = tmp1;
	vec[2] = tmp2;
	vec[3] = tmp3;
	 solve(vec);

	system("pause");
	return 0;
}